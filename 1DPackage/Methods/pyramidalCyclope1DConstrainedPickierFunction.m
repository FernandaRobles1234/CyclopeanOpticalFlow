(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
(* Function to update values of v1 and v2 with Over Constrained standards *)
(* Any value that does not meets the constraints becomes 0 *)

(* Input\[Rule] {{initial values for v1, v2 and status, and counter e}, pixel of interest, {functions f1, df1, f2, df2}, threshold for magnitude error}*)
(* Output\[Rule] {new values for v1, v2 and status and e} *)
PyrUpgrade1D[{v1_,v2_,status_,e_,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Block[{fric1,fric2,p1, p2, c,d1,d2,dv1,dv2},(

p1=(p0-dv1sign)-v1;
p2=(p0+dv2sign)+v2;

c = (fline1[p0]+fline2[p0])/2;
d1=dfline1[p1];
d2=dfline2[p2];

fric1=1*dfline1'[p1];
fric2=1*dfline2'[p2];

(* magnitud *)
If[(Abs[d1]<threshold||Abs[d2]<threshold ),
If[e<2,Return[{v1,v2,"mag",e+1,dv1sign,dv2sign}],Return[{0.,0.,"mag",e,0.,0.}]]];


(* Change of sign during iteration *)
(*If[(dfline1[p0]*d1<0||dfline2[p0]*d2<0),If[e<2,Return[{v1,v2,"flip",e+1}],Return[{0.,0.,"flip",e}]]];*)

If[d1*d2 <0, 

If[e<2,

(* if p at initial position and failed... *)
If[((p0-dv1sign)==p1 &&(p0+dv2sign)==p2),
(*we could use the root to find the new dv1 too*)
(* we feed new dv1sign... *)
If[Abs[d1]>Abs[d2],
{newdv1sign,newdv2sign}={0.,-((c-fline2[p2])/(d2))},
{newdv1sign,newdv2sign}={-((fline1[p1]-c)/(d1)),0.}];

Return[PyrUpgrade1D[{v1,v2,"oksign",e,newdv1sign, newdv2sign},p0, {{fline1,dfline1} ,{fline2,dfline2}}, threshold,"ConstrainedPickierFunction"]],

Return[PyrUpgrade1D[{v1,v2,"oksign",e,dv1sign,dv2sign},p0, {{fline1,dfline1} ,{fline2,dfline2}}, threshold,"ConstrainedPickierFunction"]]
]
,
Return[{0.,0.,"sign",e,0.,0.}]
]
];

(* dv1,dv2 : step from last {v1,v2} to new {v1,v2} *)
{dv1,dv2}= {(fline1[p1]-c)/(d1+Sign[d1]*Abs[fric1]),(c-fline2[p2])/(d2+Sign[d2]*Abs[fric2])};

{v1+dv1,v2+dv2,If[Norm[{dv1,dv2}]<0.001,"converged","ok"],e,dv1sign,dv2sign}
)];

(* No other solution will be calculated when status records an error message in this pyramidal level*)
(* status: "OK" -> solution respects constraints,  errors: "sign", "mag", "flip" *)
(* status: "converged" -> we converged!! *)

PyrUpgrade1D[{v1_,v2_,"oksign",e_,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Block[{fric1,fric2,p1,p2,c,d1,d2,dv1,dv2,r0},(

p1=(p0-dv1sign)-v1;
p2=(p0+dv2sign)+v2;

c = (fline1[p0]+fline2[p0])/2;
d1=dfline1[p1];
d2=dfline2[p2];

fric1=1*dfline1'[p1];
fric2=1*dfline2'[p2];

(*{Null,Null}*)
(* magnitude *)
If[(Abs[d1]<threshold||Abs[d2]<threshold ),If[e<2,Return[{v1,v2,"mag",e+1,dv1sign,dv2sign}],Return[{0.,0.,"mag",e,0.,0.}]]];

(*{v1,v2}*)
(* Change of sign during iteration *)
(*If[(dfline1[p0-dv1sign]*d1<0||dfline2[p0+dv2sign]*d2<0),If[e<2,Return[{v1,v2,"flip",e+1,dv1sign,dv2sign}],Return[{0.,0.,"flip",e,0.,0.}]]];*)

(*{Null,Null}*)
(* d1 and d2 have to be the same sign *)
 If[d1*d2 <0, If[e<2,Return[{v1,v2,"sign",e+1,dv1sign,dv2sign}],Return[{0.,0.,"sign",e,0.,0.}]]]; 

(* dv1,dv2 : step from last {v1,v2} to new {v1,v2} *)
{dv1,dv2}= {(fline1[p1]-c)/(d1+Sign[d1]*Abs[fric1]),(c-fline2[p2])/(d2+Sign[d2]*Abs[fric2])};

{v1+dv1,v2+dv2,If[Norm[{dv1,dv2}]<0.001,"converged","oksign"],e,dv1sign,dv2sign}
)];

PyrUpgrade1D[{v1_,v2_,status_,2,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Return[{0.,0.,status,2,0.,0.}];

PyrUpgrade1D[{v1_,v2_,"sign",e_,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Return[{v1,v2,"sign",e,dv1sign,dv2sign}];

PyrUpgrade1D[{v1_,v2_,"mag",e_,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Return[{v1,v2,"mag",e,dv1sign,dv2sign}];

PyrUpgrade1D[{v1_,v2_,"flip",e_,dv1sign_,dv2sign_},p0_, {{fline1_,dfline1_} ,{fline2_,dfline2_}}, threshold_,"ConstrainedPickierFunction"]:=Return[{v1,v2,"flip",e,dv1sign,dv2sign}];



(* ::Input::Initialization:: *)
(* This will only give values that sum up to the magnitude of v 
Or if v0 = 0, random values between 10 and -10 *)

newValues[i_,{v1_,v2_},v0_,"ConstrainedPickierFunction"]:=Block[{v,r,rs},(
v=v1+v2;

If[v!=0.,
Table[
r=RandomReal[];
{r,1-r}*v
,{j,i}]
,
Table[
r=RandomReal[];
{r,1-r}*v0
,{j,i}]
]

)]


(* ::Input::Initialization:: *)
(* This will give back a value that converged or is on "ok" status. If not, error is returned and {v1,v2} goes back to 0. *)

pickNewValue[tableNewVals_,"ConstrainedPickierFunction"]:=Block[{newValCon,newValOk},(

newValCon=Select[tableNewVals,#[[3]]==("converged")&,1];
newValOk=Select[tableNewVals,#[[3]]==("ok")&,1];

If[newValCon=={},

If[newValOk=={},
Flatten[{0.,0.,tableNewVals[[1,3;;6]]}],
newValOk[[1]]],

newValCon[[1]]]
)]


(* ::Input::Initialization:: *)
(* Function to find solutions for all levels of pyramid {l1,l2,l3,l4,...} or {l1} *)
(* Input\[Rule] {number of iterations, pixel of interests, pyrfunctions,threshold *)
(* Output\[Rule] {v1, v2,status}*)
PyrFlow1D[i_, p0_,v0_, pyrfunctions_,threshold_,"ConstrainedPickierFunction"]:=Block[{c, updateValues,nV,tableNewValues,tValues},(

c=Length[pyrfunctions]; (* number of levels *)

(*{v1, v2, status, e}*)
updateValues={0.,0.,"ok",0.,0.,0.};

Do[

(* This will only give values that sum up to the magnitude of v 
Or if v0 = 0, random values between 5 and -5 *)
nV=newValues[50,{updateValues[[1]],updateValues[[2]]},v0,"ConstrainedPickierFunction"];
(* compute at this scale, using current motion estimate *)

(* Flag to stop when e\[GreaterEqual]2 *)
If[updateValues[[4]]<2,updateValues[[3]]="ok",updateValues={0.,0.,updateValues[[3]],2.,0.,0.}];

tableNewValues=Table[

(* We initialize whith values calculated at nV and last calculated updateValues[[3;;4]]*)
tValues=Flatten[{v,updateValues[[3;;6]]}];

Do[

tValues=PyrUpgrade1D[tValues,p0, pyrfunctions[[-f]],threshold*2^(-c+1),"ConstrainedPickierFunction"]

,{j,1,i}];

tValues
,{v,nV}];


(* We only update updateValues with the tValue that converged *)
updateValues=pickNewValue[tableNewValues,"ConstrainedPickierFunction"];

c=c-1;
,{f,1,Length[pyrfunctions]}];

updateValues[[1;;3]]
)];


(* ::Input::Initialization:: *)
pickNewValueIter[tableIterNewVals_,"ConstrainedPickierFunction"]:=Block[{newIterValCon,newIterValOk},(

newIterValCon=Select[tableIterNewVals,Last[#][[3]]==("converged")&,1];
newIterValOk=Select[tableIterNewVals,Last[#][[3]]==("ok")&,1];

If[newIterValCon=={},

If[newIterValOk=={},
Join[tableIterNewVals[[1]],{Flatten[{0.,0.,Last[tableIterNewVals[[1]]][[3;;6]]}]}]
,
newIterValOk[[1]]
]
,
newIterValCon[[1]]
]
)]


(* ::Input::Initialization:: *)
(* Function to find solutions for all levels of pyramid {l1,l2,l3,l4,...} or {l1} *)
(* Input\[Rule] {number of iterations, pixel of interests, pyrfunctions,threshold *)
(* Output\[Rule] {v1, v2,status}*)
PyrFlow1DIter[i_, p0_,v0_, pyrfunctions_,threshold_,"ConstrainedPickierFunction"]:=Block[{c,updateValues,newVals,tableNewValues,tValues,iterTable,goodValIter,nV,pyrTable},(

c=Length[pyrfunctions]; (* number of levels *)

(*{v1, v2, status, e}*)
updateValues={0.,0.,"ok",0.,0.,0.};

pyrTable=Table[

(* This will only give values that sum up to the magnitude of v 
Or if v0 = 0, random values between 5 and -5 *)
nV=newValues[100,{updateValues[[1]],updateValues[[2]]},v0,"ConstrainedPickierFunction"];

(* Flag to stop when e\[GreaterEqual]2 *)
If[updateValues[[4]]<2,updateValues[[3]]="ok", updateValues={0.,0.,updateValues[[3]],2.,0.,0.}];

tableNewValues=Table[

(* We initialize whith values calculated at nV and last calculated updateValues[[3;;4]]*)
tValues=Flatten[{v,updateValues[[3;;6]]}];


iterTable=Table[

tValues=PyrUpgrade1D[tValues,p0, pyrfunctions[[-f]],threshold*2^(-c+1),"ConstrainedPickierFunction"]

,{j,1,i}]

,{v,nV}];

c=c-1;

goodValIter=pickNewValueIter[tableNewValues,"ConstrainedPickierFunction"];
updateValues=Last[goodValIter];
goodValIter

,{f,1,Length[pyrfunctions]}];

Flatten[{pyrTable[[All,All,1]]+pyrTable[[All,All,-2]],pyrTable[[All,All,2]]+pyrTable[[All,All,-1]],pyrTable[[All,All,3]]},{{2},{3},{1}}]


)];



