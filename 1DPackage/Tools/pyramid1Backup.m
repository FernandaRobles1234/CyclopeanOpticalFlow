(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
gaussianKernel[a_]:={1-a*2, 1,a*4,1,1-a*2}/4.0;

gaussianKernel::usage="
Gaussian filter tap 5 where a={0.3, 0,6}
";


(* ::Input::Initialization:: *)
pyrNextLevel[line_]:=Block[{d},(
d=ListConvolve[gaussianKernel[0.3],ArrayPad[line,2+2(* to get 1 extra value on each side *),"Fixed"]];
Mean/@Partition[d,2]
)];

pyrNextLevel::usage="
Takes values from any level and return the values of the next level
ADDS a value before and after, padding of 2 which become 1 due to averaging
";


(* ::Input::Initialization:: *)
pyrNextCoord[coords_]:=Block[{step,first,last,x},(
step=coords[[2]]-coords[[1]];
first=coords[[1]]-2*(step);
last=coords[[-1]]+2*(step);
x=Table[i,{i,first,last,step}];
N[Mean/@Partition[x,2]]
)];

pyrNextCoord::usage="
compute the X coordinates of next level based on a current level
we usually start with Range[1,lineSize] at level 0
";


(* ::Input::Initialization:: *)
pyrCoordFirstLast[level_,lineSizeLevel0_]:=Block[{},(
Nest[pyrNextCoord,Range[1,lineSizeLevel0],level][[{1,-1}]]
)];

pyrCoordFirstLast::usage="
return: first and last coordinates of a specific pyramid level.
 ATENTION: we need the lineSize of level 0 to figure out the coordinates of all following levels 
";


(* ::Input::Initialization:: *)
functionGen[line_,{firstCoord_,___,lastCoord_}] := Block[
{fline}, (
fline=ListInterpolation[line, {firstCoord,lastCoord}, Method -> "Spline", InterpolationOrder -> 3];
{fline,fline'}
)];

functionGen::usage="
create a spline for the line containing y values, and coords contains the x coordinates of the values
  actually, only the first and last coords are used...
";


(* ::Input::Initialization:: *)
pyrFuncGen[line0_,maxLevel_]:=Block[{y,x},(
y=NestList[pyrNextLevel,line0,maxLevel];
x=NestList[pyrNextCoord,Range[1,Length[line0]],maxLevel];
Table[functionGen[y[[i]],x[[i]]],{i,1,Length[y]}]
)];

pyrFuncGen::usage="
Input= [Points to interpolate, max target lvl]
Output= {maxlvl+1, {f, df}}
";



